

==什么是指针？==
指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：

type *var-name;
在这里，type 是指针的基类型，它必须是一个有效的 C 数据类型，var-name 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：
int    *ip;    /* 一个整型的指针 */
double *dp;    /* 一个 double 型的指针 */
float  *fp;    /* 一个浮点型的指针 */
char   *ch     /* 一个字符型的指针 */
所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。

==如何使用指针==
使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：

evan@evanpc:~/github/learn-c/pointer$ cat 1.c
#include <stdio.h>
int main()
{
  int var = 20;
    int *ip;

  ip = &var;
  printf("address of var variable: %x\n",&var);
  printf("address stored in ip variable: %x\n", ip);
  printf("value of *ip variable: %d\n", *ip);
  return 0;
  }
gcc 1.c -o 1
evan@evanpc:~/github/learn-c/pointer$ ./1
address of var variable: 232856f4
address stored in ip variable: 232856f4
value of *ip variable: 20
	  


笔记列表
指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。
要理解指针就要先理解计算机的内存。计算机内存会被划分为按顺序编号的内存单元。每个变量都是存储在内存单元中的，称之为地址。





C 指针

http://www.runoob.com/cprogramming/c-pointers.html


== C 结构体==

定义结构
为了定义结构，您必须使用 struct 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：
struct [structure tag]
{
   member definition;
   member definition;
   ...
   member definition;
   } [one or more structure variables];

structure tag 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，这是可选的。下面是声明 Book 结构的方式：

struct Books
{
  char title[50];
  char author[50];
  char subject[100];
  int book_id;
} book;


访问结构成员

van@evanpc:~/github/learn-c/pointer$ cat 2.c
#include <stdio.h>
#include <string.h>
struct Books
{
  char title[50];
    char author[50];
      char subject[100];
        int book_id;
	};
	int main()
	{
	  struct Books Book1;
	    struct Books Book2;
	      //
	       strcpy( Book1.title,"c prigram");
	        strcpy( Book1.author,"evan");
		 strcpy( Book1.subject, "c program turo");
		  Book1.book_id = 6495407;

/* Book2 详述 */

strcpy( Book2.title,"telecom prigram");
 strcpy( Book2.author,"lai2");
  strcpy( Book2.subject, "telecom  program turo");
   Book1.book_id = 6495404;

 printf( "Book 1 title : %s\n",Book1.title);
  printf( "Book 1 author : %s\n",Book1.author);
   printf( "Book 1 subject : %s\n",Book1.subject);
    printf( "Book 1 book_id : %d\n",Book1.book_id); // 记得是 %d  不是%s
     printf( "Book 2 title : %s\n",Book2.title);
      printf( "Book 2 author : %s\n",Book2.author);
       printf( "Book 2 subject : %s\n",Book2.subject);
        printf( "Book 1 book_id : %d\n",Book1.book_id);

 return 0;
 };


evan@evanpc:~/github/learn-c/pointer$ gcc 2.c -o 2
evan@evanpc:~/github/learn-c/pointer$ ./2
Book 1 title : c prigram
Book 1 author : evan
Book 1 subject : c program turo
Book 1 book_id : 6495404
Book 2 title : telecom prigram
Book 2 author : lai2
Book 2 subject : telecom  program turo
Book 1 book_id : 6495404

 === 结构作为函数参数===

您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。您可以使用上面实例中的方式来访问结构变量：